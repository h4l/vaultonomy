name: ci

on:
  push:

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.list_targets.outputs.targets }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List targets
        id: list_targets
        uses: docker/bake-action/subaction/list-targets@v4
        with:
          target: tasks

      - name: Verify tag matches version
        if: startsWith(github.event.ref, 'refs/tags/v')
        run: |
          package_version=$(jq < package.json -r .version)
          tag_version=${GITHUB_REF/#refs\/tags\/v/}
          if [[ ${tag_version:?} != ${package_version:?} ]]; then
            echo "Error: git tag does not match package.json version" >&2
            declare -p GITHUB_REF tag_version package_version >&2
            exit 1
          fi

  validate:
    runs-on: ubuntu-latest
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.prepare.outputs.targets) }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate
        uses: docker/bake-action@v5
        with:
          source: ${{ github.server_url }}/${{ github.repository }}.git#${{ github.sha }}
          targets: ${{ matrix.target }}

  package:
    runs-on: ubuntu-latest
    needs:
      - prepare
    permissions:
      # required to create attestations
      id-token: write
      attestations: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build release packages
        uses: docker/bake-action@v5
        with:
          source: "${{ github.server_url }}/${{ github.repository }}.git#${{ github.sha }}"
          targets: packages

      - name: Rename package & attestation files
        run: |
          # Flatten the nested build output dirs and rename provenance. The
          # build generates provenance.json in each output dir which corresponds
          # to the .zip in each dir. We want the provenance file names to
          # contain the browser and version.

          for package in dist/packages/*/*.zip; do
            browser_dir=$(dirname "${package:?}")
            filename=$(basename "${package:?}")
            package_id=${filename/%.zip/}

            mv "${browser_dir:?}/provenance.json" "dist/${package_id:?}_provenance.json"
            mv "${package:?}" "dist/"
          done

      - name: Create GitHub attestations
        uses: actions/attest-build-provenance@v1
        # Only create attestations for release artefacts, as regular branch
        # builds aren't stored long-term, and we don't expect people to use them
        # for anything serious.
        if: startsWith(github.event.ref, 'refs/tags/v')
        with:
          subject-path: |
            dist/vaultonomy_*.zip
            dist/vaultonomy_*_provenance.json

      - name: Store built extension packages
        uses: actions/upload-artifact@v4
        with:
          name: package_files
          path: |
            dist/vaultonomy_*.zip
            dist/vaultonomy_*_provenance.json
          # We don't need to store these for long, as release artefacts get
          # added to the GitHub Releases we create.
          retention-days: 7

  github-release:
    runs-on: ubuntu-latest
    needs:
      - validate
      - package
    if: startsWith(github.event.ref, 'refs/tags/v')
    permissions:
      # required to create releases
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      # We don't use the repo files, but gh release create needs the repo.
      - name: Checkout
        uses: actions/checkout@v4

      - run: rm -rf dist

      - name: Download extension packages
        uses: actions/download-artifact@v4
        with:
          name: package_files
          path: dist

      - name: Validate GitHub attestations
        run: |
          files=(dist/*.zip dist/*.json)
          if (( ${#files[@]} != 4 )); then
            { echo "Unexpected package files:"; find . >&2; declare -p files; } >&2;
            exit 1
          fi

          for file in "${files[@]}"; do
            gh attestation verify ${file:?} \
              --repo "${GITHUB_REPOSITORY:?}" \
              --signer-workflow "${GITHUB_WORKFLOW_REF:?}"
          done

      - name: Create GitHub Release
        run: |
          files=(dist/*.zip dist/*.json)
          tag_name=${GITHUB_REF/#refs\/tags\//}  # remove the refs/tags/ prefix

          release_opts=()
          # Pre-release semver versions contain -, e.g. 1.2.3-beta.1
          [[ ${tag_name:?} =~ [-] ]] && release_opts+=(--prerelease)

          gh release create --verify-tag --generate-notes --draft \
            "${release_opts[@]}" "${tag_name:?}" "${files[@]}"
